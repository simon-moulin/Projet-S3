# -*- coding: utf-8 -*-
"""Programme Final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NNtqU5uU3usQlEVKH5yIDtUhs_ZdnFxS

# Importation des librairies
"""

# Commented out IPython magic to ensure Python compatibility.
import pathlib
import numpy as np
import os
import matplotlib.pyplot as plt
import random
import math
import cv2
import tensorflow_hub as hub
import base64

from io import BytesIO
from PIL import Image

try:
  # %tensorflow_version only exists in Colab.
#   %tensorflow_version 2.x
except Exception:
  pass
import tensorflow as tf

from tensorflow import keras
from tensorflow.keras import layers

print(tf.__version__)

#Importation du Google Drive
from google.colab import drive
drive.mount('/content/drive')

"""# Importation des images"""

#Ouverture des images et forematage de celles-ci
IMG_SIZE=50

descriptions = []
imgs = []

PATH_TO_DATA = 'drive/My Drive/blasons50_b64.txt'
        
with open(PATH_TO_DATA) as f:
    for line in f:
        # on prend la description entière
        descriptions.append(line.split(';')[0])

        # on prend l'image
        b64 = line.split(';')[1]
        img = Image.open(BytesIO(base64.b64decode(b64)))
        img_array = np.array(img)

        imgs.append(img_array)

f.closed

# Resize array, keras préfere
descriptions = np.array(descriptions).reshape((-1, 1))
imgs = np.array(imgs).reshape(-1, IMG_SIZE, IMG_SIZE, 4)

plt.imshow(imgs[0])
print(descriptions[0])
print(len(imgs))

"""# Importation des models"""

#Importation des modèles suavegardés
models = []

models.append(tf.keras.models.load_model("drive/My Drive/modelSaved/divisionCNNSayian.h5", custom_objects={'KerasLayer': hub.KerasLayer}))
models.append(tf.keras.models.load_model("drive/My Drive/modelSaved/CouleurOrdinaryCNNSayian.h5", custom_objects={'KerasLayer': hub.KerasLayer}))
models.append(tf.keras.models.load_model("drive/My Drive/modelSaved/couleursSayian.h5", custom_objects={'KerasLayer': hub.KerasLayer}))
models.append(tf.keras.models.load_model("drive/My Drive/modelSaved/OrdinaryCNNSayian.h5", custom_objects={'KerasLayer': hub.KerasLayer}))
models.append(tf.keras.models.load_model("drive/My Drive/modelSaved/CouleurDivisionCNNSayian.h5", custom_objects={'KerasLayer': hub.KerasLayer}))
models.append(tf.keras.models.load_model("drive/My Drive/modelSaved/nombreFormesDivisionSayian.h5", custom_objects={'KerasLayer': hub.KerasLayer}))
models.append(tf.keras.models.load_model("drive/My Drive/modelSaved/nombreFormesFieldSayian.h5", custom_objects={'KerasLayer': hub.KerasLayer}))
models.append(tf.keras.models.load_model("drive/My Drive/modelSaved/nombreFormesOrdinarySayian.h5", custom_objects={'KerasLayer': hub.KerasLayer}))

#Déclaration de toutes les catégories prises par les modèles
DIVISIONS = ["bend", "bend sinister", "chevron", "fess", "gyronny", "pale", "quarter", "saltire", "aucun"]
COULEURS = ["argent", "azure", "gules", "or", "purpure", "sable", "vert","aucun"]
ORDINARIES = ['bend', 'bend sinister', 'chevron', 'cross', 'fess', 'pale', 'saltire', 'aucun']
NUMBER = ["aucun", "one", "two", "three", "four", "five"]

"""# Prédictions avec une photo"""

photo = Image.open("drive/My Drive/photo/12.jpg")
photo = photo.resize((50, 50))

photo = np.array(photo)
photo = np.concatenate(([photo, 255 * np.ones((50, 50, 1), dtype=np.uint8)]), axis=-1)

print(photo.shape)
plt.imshow(photo)

img = np.array([photo],dtype="float16")


result = []

for model in models:
  predictions = model.predict(img)
  result.append(np.argmax(predictions[0]))

print("Couleur de fond: " + COULEURS[result[2]])
print("Nombre de formes de field: " + NUMBER[result[6]])
print("Division: " + DIVISIONS[result[0]])
print("Couleur de division: " + COULEURS[result[4]])
print("Nombre de formes de division: " + NUMBER[result[5]])
print("Ordinary: " + ORDINARIES[result[3]])
print("Couleur d'ordinary: " + COULEURS[result[1]])
print("Nombre de formes de ordinary: " + NUMBER[result[7]])

"""# Prédictions avec un blason"""

#On devine sur un blason au hasard ses caractéristiques
n = random.randint(0, 1000)

img = imgs[n]
plt.imshow(img)
img = np.array([img],dtype="float16")

result = []

for model in models:
  predictions = model.predict(img)
  result.append(np.argmax(predictions[0]))

print("Couleur de fond: " + COULEURS[result[2]])
print("Nombre de formes de field: " + NUMBER[result[6]])
print("Division: " + DIVISIONS[result[0]])
print("Couleur de division: " + COULEURS[result[4]])
print("Nombre de formes de division: " + NUMBER[result[5]])
print("Ordinary: " + ORDINARIES[result[3]])
print("Couleur d'ordinary: " + COULEURS[result[1]])
print("Nombre de formes de ordinary: " + NUMBER[result[7]])


print(descriptions[n])